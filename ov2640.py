import machine
import time
import network
import ubinascii
import socket
import uos
import gc

OV2640_JPEG_INIT = [
  [ 0xff, 0x00 ],
  [ 0x2c, 0xff ],
  [ 0x2e, 0xdf ],
  [ 0xff, 0x01 ],
  [ 0x3c, 0x32 ],
  [ 0x11, 0x04 ],	
  [ 0x09, 0x02 ],
  [ 0x04, 0x28 ],
  [ 0x13, 0xe5 ],
  [ 0x14, 0x48 ],
  [ 0x2c, 0x0c ],
  [ 0x33, 0x78 ],
  [ 0x3a, 0x33 ],
  [ 0x3b, 0xfB ],
  [ 0x3e, 0x00 ],
  [ 0x43, 0x11 ],
  [ 0x16, 0x10 ],
  [ 0x39, 0x92 ],
  [ 0x35, 0xda ],
  [ 0x22, 0x1a ],
  [ 0x37, 0xc3 ],
  [ 0x23, 0x00 ],
  [ 0x34, 0xc0 ],
  [ 0x36, 0x1a ],
  [ 0x06, 0x88 ],
  [ 0x07, 0xc0 ],
  [ 0x0d, 0x87 ],
  [ 0x0e, 0x41 ],
  [ 0x4c, 0x00 ],
  [ 0x48, 0x00 ],
  [ 0x5B, 0x00 ],
  [ 0x42, 0x03 ],
  [ 0x4a, 0x81 ],
  [ 0x21, 0x99 ],
  [ 0x24, 0x40 ],
  [ 0x25, 0x38 ],
  [ 0x26, 0x82 ],
  [ 0x5c, 0x00 ],
  [ 0x63, 0x00 ],
  [ 0x61, 0x70 ],
  [ 0x62, 0x80 ],
  [ 0x7c, 0x05 ],
  [ 0x20, 0x80 ],
  [ 0x28, 0x30 ],
  [ 0x6c, 0x00 ],
  [ 0x6d, 0x80 ],
  [ 0x6e, 0x00 ],
  [ 0x70, 0x02 ],
  [ 0x71, 0x94 ],
  [ 0x73, 0xc1 ],
  [ 0x12, 0x40 ],
  [ 0x17, 0x11 ],
  [ 0x18, 0x43 ],
  [ 0x19, 0x00 ],
  [ 0x1a, 0x4b ],
  [ 0x32, 0x09 ],
  [ 0x37, 0xc0 ],
  [ 0x4f, 0x60 ],
  [ 0x50, 0xa8 ],
  [ 0x6d, 0x00 ],
  [ 0x3d, 0x38 ],
  [ 0x46, 0x3f ],
  [ 0x4f, 0x60 ],
  [ 0x0c, 0x3c ],
  [ 0xff, 0x00 ],
  [ 0xe5, 0x7f ],
  [ 0xf9, 0xc0 ],
  [ 0x41, 0x24 ],
  [ 0xe0, 0x14 ],
  [ 0x76, 0xff ],
  [ 0x33, 0xa0 ],
  [ 0x42, 0x20 ],
  [ 0x43, 0x18 ],
  [ 0x4c, 0x00 ],
  [ 0x87, 0xd5 ],
  [ 0x88, 0x3f ],
  [ 0xd7, 0x03 ],
  [ 0xd9, 0x10 ],
  [ 0xd3, 0x82 ],
  [ 0xc8, 0x08 ],
  [ 0xc9, 0x80 ],
  [ 0x7c, 0x00 ],
  [ 0x7d, 0x00 ],
  [ 0x7c, 0x03 ],
  [ 0x7d, 0x48 ],
  [ 0x7d, 0x48 ],
  [ 0x7c, 0x08 ],
  [ 0x7d, 0x20 ],
  [ 0x7d, 0x10 ],
  [ 0x7d, 0x0e ],
  [ 0x90, 0x00 ],
  [ 0x91, 0x0e ],
  [ 0x91, 0x1a ],
  [ 0x91, 0x31 ],
  [ 0x91, 0x5a ],
  [ 0x91, 0x69 ],
  [ 0x91, 0x75 ],
  [ 0x91, 0x7e ],
  [ 0x91, 0x88 ],
  [ 0x91, 0x8f ],
  [ 0x91, 0x96 ],
  [ 0x91, 0xa3 ],
  [ 0x91, 0xaf ],
  [ 0x91, 0xc4 ],
  [ 0x91, 0xd7 ],
  [ 0x91, 0xe8 ],
  [ 0x91, 0x20 ],
  [ 0x92, 0x00 ],
  [ 0x93, 0x06 ],
  [ 0x93, 0xe3 ],
  [ 0x93, 0x05 ],
  [ 0x93, 0x05 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x04 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x00 ],
  [ 0x93, 0x00 ],
  [ 0x96, 0x00 ],
  [ 0x97, 0x08 ],
  [ 0x97, 0x19 ],
  [ 0x97, 0x02 ],
  [ 0x97, 0x0c ],
  [ 0x97, 0x24 ],
  [ 0x97, 0x30 ],
  [ 0x97, 0x28 ],
  [ 0x97, 0x26 ],
  [ 0x97, 0x02 ],
  [ 0x97, 0x98 ],
  [ 0x97, 0x80 ],
  [ 0x97, 0x00 ],
  [ 0x97, 0x00 ],
  [ 0xc3, 0xed ],
  [ 0xa4, 0x00 ],
  [ 0xa8, 0x00 ],
  [ 0xc5, 0x11 ],
  [ 0xc6, 0x51 ],
  [ 0xbf, 0x80 ],
  [ 0xc7, 0x10 ],
  [ 0xb6, 0x66 ],
  [ 0xb8, 0xA5 ],
  [ 0xb7, 0x64 ],
  [ 0xb9, 0x7C ],
  [ 0xb3, 0xaf ],
  [ 0xb4, 0x97 ],
  [ 0xb5, 0xFF ],
  [ 0xb0, 0xC5 ],
  [ 0xb1, 0x94 ],
  [ 0xb2, 0x0f ],
  [ 0xc4, 0x5c ],
  [ 0xc0, 0x64 ],
  [ 0xc1, 0x4B ],
  [ 0x8c, 0x00 ],
  [ 0x86, 0x3D ],
  [ 0x50, 0x00 ],
  [ 0x51, 0xC8 ],
  [ 0x52, 0x96 ],
  [ 0x53, 0x00 ],
  [ 0x54, 0x00 ],
  [ 0x55, 0x00 ],
  [ 0x5a, 0xC8 ],
  [ 0x5b, 0x96 ],
  [ 0x5c, 0x00 ],
  [ 0xd3, 0x00 ],
  [ 0xc3, 0xed ],
  [ 0x7f, 0x00 ],
  [ 0xda, 0x00 ],
  [ 0xe5, 0x1f ],
  [ 0xe1, 0x67 ],
  [ 0xe0, 0x00 ],
  [ 0xdd, 0x7f ],
  [ 0x05, 0x00 ],
  [ 0x12, 0x40 ],
  [ 0xd3, 0x04 ],
  [ 0xc0, 0x16 ],
  [ 0xC1, 0x12 ],
  [ 0x8c, 0x00 ],
  [ 0x86, 0x3d ],
  [ 0x50, 0x00 ],
  [ 0x51, 0x2C ],
  [ 0x52, 0x24 ],
  [ 0x53, 0x00 ],
  [ 0x54, 0x00 ],
  [ 0x55, 0x00 ],
  [ 0x5A, 0x2c ],
  [ 0x5b, 0x24 ],
  [ 0x5c, 0x00 ],
  [ 0xff, 0xff ],
]

OV2640_YUV422 = [
  [ 0xFF, 0x00 ],
  [ 0x05, 0x00 ],
  [ 0xDA, 0x10 ],
  [ 0xD7, 0x03 ],
  [ 0xDF, 0x00 ],
  [ 0x33, 0x80 ],
  [ 0x3C, 0x40 ],
  [ 0xe1, 0x77 ],
  [ 0x00, 0x00 ],
  [ 0xff, 0xff ],
]

OV2640_JPEG = [
  [ 0xe0, 0x14 ],
  [ 0xe1, 0x77 ],
  [ 0xe5, 0x1f ],
  [ 0xd7, 0x03 ],
  [ 0xda, 0x10 ],
  [ 0xe0, 0x00 ],
  [ 0xFF, 0x01 ],
  [ 0x04, 0x08 ],
  [ 0xff, 0xff ],
]

OV2640_160x120_JPEG = [
  [ 0xff, 0x01 ],
  [ 0x12, 0x40 ],
  [ 0x17, 0x11 ],
  [ 0x18, 0x43 ],
  [ 0x19, 0x00 ],
  [ 0x1a, 0x4b ],
  [ 0x32, 0x09 ],
  [ 0x4f, 0xca ],
  [ 0x50, 0xa8 ],
  [ 0x5a, 0x23 ],
  [ 0x6d, 0x00 ],
  [ 0x39, 0x12 ],
  [ 0x35, 0xda ],
  [ 0x22, 0x1a ],
  [ 0x37, 0xc3 ],
  [ 0x23, 0x00 ],
  [ 0x34, 0xc0 ],
  [ 0x36, 0x1a ],
  [ 0x06, 0x88 ],
  [ 0x07, 0xc0 ],
  [ 0x0d, 0x87 ],
  [ 0x0e, 0x41 ],
  [ 0x4c, 0x00 ],
  [ 0xff, 0x00 ],
  [ 0xe0, 0x04 ],
  [ 0xc0, 0x64 ],
  [ 0xc1, 0x4b ],
  [ 0x86, 0x35 ],
  [ 0x50, 0x92 ],
  [ 0x51, 0xc8 ],
  [ 0x52, 0x96 ],
  [ 0x53, 0x00 ],
  [ 0x54, 0x00 ],
  [ 0x55, 0x00 ],
  [ 0x57, 0x00 ],
  [ 0x5a, 0x28 ],
  [ 0x5b, 0x1e ],
  [ 0x5c, 0x00 ],
  [ 0xe0, 0x00 ],
  [ 0xff, 0xff ],
]


OV2640_176x144_JPEG = [
  [ 0xff, 0x01 ],
  [ 0x12, 0x40 ],
  [ 0x17, 0x11 ],
  [ 0x18, 0x43 ],
  [ 0x19, 0x00 ],
  [ 0x1a, 0x4b ],
  [ 0x32, 0x09 ],
  [ 0x4f, 0xca ],
  [ 0x50, 0xa8 ],
  [ 0x5a, 0x23 ],
  [ 0x6d, 0x00 ],
  [ 0x39, 0x12 ],
  [ 0x35, 0xda ],
  [ 0x22, 0x1a ],
  [ 0x37, 0xc3 ],
  [ 0x23, 0x00 ],
  [ 0x34, 0xc0 ],
  [ 0x36, 0x1a ],
  [ 0x06, 0x88 ],
  [ 0x07, 0xc0 ],
  [ 0x0d, 0x87 ],
  [ 0x0e, 0x41 ],
  [ 0x4c, 0x00 ],
  [ 0xff, 0x00 ],
  [ 0xe0, 0x04 ],
  [ 0xc0, 0x64 ],
  [ 0xc1, 0x4b ],
  [ 0x86, 0x35 ],
  [ 0x50, 0x92 ],
  [ 0x51, 0xc8 ],
  [ 0x52, 0x96 ],
  [ 0x53, 0x00 ],
  [ 0x54, 0x00 ],
  [ 0x55, 0x00 ],
  [ 0x57, 0x00 ],
  [ 0x5a, 0x2c ],
  [ 0x5b, 0x24 ],
  [ 0x5c, 0x00 ],
  [ 0xe0, 0x00 ],
  [ 0xff, 0xff ],
]


OV2640_320x240_JPEG = [
  [ 0xff, 0x01 ],
  [ 0x12, 0x40 ],
  [ 0x17, 0x11 ],
  [ 0x18, 0x43 ],
  [ 0x19, 0x00 ],
  [ 0x1a, 0x4b ],
  [ 0x32, 0x09 ],
  [ 0x4f, 0xca ],
  [ 0x50, 0xa8 ],
  [ 0x5a, 0x23 ],
  [ 0x6d, 0x00 ],
  [ 0x39, 0x12 ],
  [ 0x35, 0xda ],
  [ 0x22, 0x1a ],
  [ 0x37, 0xc3 ],
  [ 0x23, 0x00 ],
  [ 0x34, 0xc0 ],
  [ 0x36, 0x1a ],
  [ 0x06, 0x88 ],
  [ 0x07, 0xc0 ],
  [ 0x0d, 0x87 ],
  [ 0x0e, 0x41 ],
  [ 0x4c, 0x00 ],
  [ 0xff, 0x00 ],
  [ 0xe0, 0x04 ],
  [ 0xc0, 0x64 ],
  [ 0xc1, 0x4b ],
  [ 0x86, 0x35 ],
  [ 0x50, 0x89 ],
  [ 0x51, 0xc8 ],
  [ 0x52, 0x96 ],
  [ 0x53, 0x00 ],
  [ 0x54, 0x00 ],
  [ 0x55, 0x00 ],
  [ 0x57, 0x00 ],
  [ 0x5a, 0x50 ],
  [ 0x5b, 0x3c ],
  [ 0x5c, 0x00 ],
  [ 0xe0, 0x00 ],
  [ 0xff, 0xff ],
]

OV2640_352x288_JPEG = [
  [ 0xff, 0x01 ],
  [ 0x12, 0x40 ],
  [ 0x17, 0x11 ],
  [ 0x18, 0x43 ],
  [ 0x19, 0x00 ],
  [ 0x1a, 0x4b ],
  [ 0x32, 0x09 ],
  [ 0x4f, 0xca ],
  [ 0x50, 0xa8 ],
  [ 0x5a, 0x23 ],
  [ 0x6d, 0x00 ],
  [ 0x39, 0x12 ],
  [ 0x35, 0xda ],
  [ 0x22, 0x1a ],
  [ 0x37, 0xc3 ],
  [ 0x23, 0x00 ],
  [ 0x34, 0xc0 ],
  [ 0x36, 0x1a ],
  [ 0x06, 0x88 ],
  [ 0x07, 0xc0 ],
  [ 0x0d, 0x87 ],
  [ 0x0e, 0x41 ],
  [ 0x4c, 0x00 ],
  [ 0xff, 0x00 ],
  [ 0xe0, 0x04 ],
  [ 0xc0, 0x64 ],
  [ 0xc1, 0x4b ],
  [ 0x86, 0x35 ],
  [ 0x50, 0x89 ],
  [ 0x51, 0xc8 ],
  [ 0x52, 0x96 ],
  [ 0x53, 0x00 ],
  [ 0x54, 0x00 ],
  [ 0x55, 0x00 ],
  [ 0x57, 0x00 ],
  [ 0x5a, 0x58 ],
  [ 0x5b, 0x48 ],
  [ 0x5c, 0x00 ],
  [ 0xe0, 0x00 ],  
  [ 0xff, 0xff ],
]

OV2640_640x480_JPEG = [
	[0xff, 0x01],
	[0x11, 0x01],
	[0x12, 0x00],
	[0x17, 0x11],
	[0x18, 0x75],
	[0x32, 0x36],
	[0x19, 0x01],
	[0x1a, 0x97],
	[0x03, 0x0f],
	[0x37, 0x40],
	[0x4f, 0xbb],
	[0x50, 0x9c],
	[0x5a, 0x57],
	[0x6d, 0x80],
	[0x3d, 0x34],
	[0x39, 0x02],
	[0x35, 0x88],
	[0x22, 0x0a],
	[0x37, 0x40],
	[0x34, 0xa0],
	[0x06, 0x02],
	[0x0d, 0xb7],
	[0x0e, 0x01],
	[0xff, 0x00], 		      
	[0xe0, 0x04],       
	[0xc0, 0xc8],       
	[0xc1, 0x96],       
	[0x86, 0x3d],       
	[0x50, 0x89],       
	[0x51, 0x90],       
	[0x52, 0x2c],       
	[0x53, 0x00],       
	[0x54, 0x00],       
	[0x55, 0x88],       
	[0x57, 0x00],       
	[0x5a, 0xa0],       
	[0x5b, 0x78],       
	[0x5c, 0x00],       
	[0xd3, 0x04],       
	[0xe0, 0x00],       
  	[0xff, 0xff],
]

OV2640_800x600_JPEG = [
	[0xff, 0x01],
	[0x11, 0x01],
	[0x12, 0x00],
	[0x17, 0x11],
	[0x18, 0x75],
	[0x32, 0x36],
	[0x19, 0x01],
	[0x1a, 0x97],
	[0x03, 0x0f],
	[0x37, 0x40],
	[0x4f, 0xbb],
	[0x50, 0x9c],
	[0x5a, 0x57],
	[0x6d, 0x80],
	[0x3d, 0x34],
	[0x39, 0x02],
	[0x35, 0x88],
	[0x22, 0x0a],
	[0x37, 0x40],
	[0x34, 0xa0],
	[0x06, 0x02],
	[0x0d, 0xb7],
	[0x0e, 0x01],
	[0xff, 0x00],
	[0xe0, 0x04],
	[0xc0, 0xc8],
	[0xc1, 0x96],
	[0x86, 0x35],
	[0x50, 0x89],
	[0x51, 0x90],
	[0x52, 0x2c],
	[0x53, 0x00],
	[0x54, 0x00],
	[0x55, 0x88],
	[0x57, 0x00],
	[0x5a, 0xc8],
	[0x5b, 0x96],
	[0x5c, 0x00],
	[0xd3, 0x02],
	[0xe0, 0x00],
  	[0xff, 0xff],
]

OV2640_1024x768_JPEG = [
	[0xff, 0x01],
	[0x11, 0x01],
	[0x12, 0x00],
	[0x17, 0x11],
	[0x18, 0x75],
	[0x32, 0x36],
	[0x19, 0x01],
	[0x1a, 0x97],
	[0x03, 0x0f],
	[0x37, 0x40],
	[0x4f, 0xbb],
	[0x50, 0x9c],
	[0x5a, 0x57],
	[0x6d, 0x80],
	[0x3d, 0x34],
	[0x39, 0x02],
	[0x35, 0x88],
	[0x22, 0x0a],
	[0x37, 0x40],
	[0x34, 0xa0],
	[0x06, 0x02],
	[0x0d, 0xb7],
	[0x0e, 0x01],
	[0xff, 0x00],		  
	[0xc0, 0xC8],          
	[0xc1, 0x96],          
	[0x8c, 0x00],          
	[0x86, 0x3D],          
	[0x50, 0x00],          
	[0x51, 0x90],          
	[0x52, 0x2C],          
	[0x53, 0x00],          
	[0x54, 0x00],          
	[0x55, 0x88],          
	[0x5a, 0x00],          
	[0x5b, 0xC0],          
	[0x5c, 0x01],          
	[0xd3, 0x02],          
        [0xff, 0xff],
]

OV2640_1280x1024_JPEG = [
	[0xff, 0x01],
	[0x11, 0x01],
	[0x12, 0x00],
	[0x17, 0x11],
	[0x18, 0x75],
	[0x32, 0x36],
	[0x19, 0x01],
	[0x1a, 0x97],
	[0x03, 0x0f],
	[0x37, 0x40],
	[0x4f, 0xbb],
	[0x50, 0x9c],
	[0x5a, 0x57],
	[0x6d, 0x80],
	[0x3d, 0x34],
	[0x39, 0x02],
	[0x35, 0x88],
	[0x22, 0x0a],
	[0x37, 0x40],
	[0x34, 0xa0],
	[0x06, 0x02],
	[0x0d, 0xb7],
	[0x0e, 0x01],
	[0xff, 0x00],     		      
	[0xe0, 0x04],           
	[0xc0, 0xc8],           
	[0xc1, 0x96],           
	[0x86, 0x3d],           
	[0x50, 0x00],           
	[0x51, 0x90],           
	[0x52, 0x2c],           
	[0x53, 0x00],           
	[0x54, 0x00],           
	[0x55, 0x88],           
	[0x57, 0x00],           
	[0x5a, 0x40],           
	[0x5b, 0xf0],           
	[0x5c, 0x01],           
	[0xd3, 0x02],           
	[0xe0, 0x00],           
  	[0xff, 0xff],
]

OV2640_1600x1200_JPEG = [
	[0xff, 0x01],
	[0x11, 0x01],
	[0x12, 0x00],
	[0x17, 0x11],
	[0x18, 0x75],
	[0x32, 0x36],
	[0x19, 0x01],
	[0x1a, 0x97],
	[0x03, 0x0f],
	[0x37, 0x40],
	[0x4f, 0xbb],
	[0x50, 0x9c],
	[0x5a, 0x57],
	[0x6d, 0x80],
	[0x3d, 0x34],
	[0x39, 0x02],
	[0x35, 0x88],
	[0x22, 0x0a],
	[0x37, 0x40],
	[0x34, 0xa0],
	[0x06, 0x02],
	[0x0d, 0xb7],
	[0x0e, 0x01],
	[0xff, 0x00],        	                              
	[0xe0, 0x04],                                   
	[0xc0, 0xc8],                                   
	[0xc1, 0x96],                                   
	[0x86, 0x3d],                                   
	[0x50, 0x00],                                   
	[0x51, 0x90],                                   
	[0x52, 0x2c],                                   
	[0x53, 0x00],                                   
	[0x54, 0x00],                                   
	[0x55, 0x88],                                   
	[0x57, 0x00],                                   
	[0x5a, 0x90],                                   
	[0x5b, 0x2C],                                   
	[0x5c, 0x05],
	[0xd3, 0x02],                                   
	[0xe0, 0x00],                                   
  	[0xff, 0xff],
]

SENSORADDR = 0x30
PICBUFSIZE = 256

class ov2640(object):
    def __init__(self, sclpin=5, sdapin=4, cspin=2, resolution=OV2640_320x240_JPEG):
        self.sdapin=sdapin
        self.sclpin=sclpin
        self.cspin=cspin
        self.standby = False

        hspi = machine.SPI(1, baudrate=80000000, polarity=0, phase=0)
        i2c = machine.I2C(scl=machine.Pin(5), sda=machine.Pin(4), freq=1000000)
    
        # first init spi assuming the hardware spi is connected
        hspi.init(baudrate=2000000)

        # chip select -- active low
        cspin = machine.Pin(2, machine.Pin.OUT)
        cspin.on()

        # init the i2c interface
        addrs = i2c.scan()
        print('ov2640_init: devices detected on on i2c:')
        for a in addrs:
            print('0x%x' % a)
   
        # select register set
        i2c.writeto_mem(SENSORADDR, 0xff, b'\x01')
        # initiate system reset
        i2c.writeto_mem(SENSORADDR, 0x12, b'\x80')
       
        # let it come up
        time.sleep_ms(100)
    
        # jpg init registers
        cam_write_register_set(i2c, SENSORADDR, OV2640_JPEG_INIT)
        cam_write_register_set(i2c, SENSORADDR, OV2640_YUV422)
        cam_write_register_set(i2c, SENSORADDR, OV2640_JPEG)
   
        # select register set
        i2c.writeto_mem(SENSORADDR, 0xff, b'\x01')
        i2c.writeto_mem(SENSORADDR, 0x15, b'\x00')
   
        # select jpg resolution
        cam_write_register_set(i2c, SENSORADDR, OV2640_320x240_JPEG)
    
        # test the SPI bus
        cam_spi_write(b'\x00', b'\x55', hspi, cspin)
        res = cam_spi_read(b'\x00', hspi, cspin)
        print("ov2640 init:  register test return bytes %s" % ubinascii.hexlify(res))
        if (res == b'\x55'):
            print("ov2640_init: register test successful")
        else:
            print("ov2640_init: register test failed!")
    
        # register set select
        i2c.writeto_mem(SENSORADDR, 0xff, b'\x01')
        # check the camera type
        parta = i2c.readfrom_mem(SENSORADDR, 0x0a, 1)
        partb = i2c.readfrom_mem(SENSORADDR, 0x0b, 1)
        if ((parta != b'\x26') or (partb != b'\x42')):
            print("ov2640_init: device type does not appear to be ov2640, bytes: %s/%s" % \
                    (ubinascii.hexlify(parta), ubinascii.hexlify(partb)))
        else:
            print("ov2640_init: device type looks correct, bytes: %s/%s" % \
                    (ubinascii.hexlify(parta), ubinascii.hexlify(partb)))

    def capture_to_file(self, filename, overwrite):
        # bit 0 - clear FIFO write done flag
        cam_spi_write(b'\x04', b'\x01', hspi, cspin)
    
        # bit 1 - start capture then read status
        cam_spi_write(b'\x04', b'\x02', hspi, cspin)
        time.sleep_ms(10)
    
        # read status
        res = cam_spi_read(b'\x41', hspi, cspin)
        cnt = 0
        #if (res == b'\x00'):
        #    print("initiate capture may have failed, return byte: %s" % ubinascii.hexlify(res))

        # read the image from the camera fifo
        while True:
            res = cam_spi_read(b'\x41', hspi, cspin)
            mask = b'\x08'
            if (res[0] & mask[0]):
                break
            #print("continuing, res register %s" % ubinascii.hexlify(res))
            time.sleep_ms(10)
            cnt += 1
        #print("slept in loop %d times" % cnt)
   
        # read the fifo size
        b1 = cam_spi_read(b'\x44', hspi, cspin)
        b2 = cam_spi_read(b'\x43', hspi, cspin)
        b3 = cam_spi_read(b'\x42', hspi, cspin)
        val = b1[0] << 16 | b2[0] << 8 | b3[0] 
        print("ov2640_capture: %d bytes in fifo" % val)
        gc.collect()
    
        bytebuf = [ 0, 0 ]
        picbuf = [ b'\x00' ] * PICBUFSIZE
        l = 0
        bp = 0
        if (overwrite == True):
            #print("deleting old file %s" % fn)
            try:
                uos.remove(fn)
            except OSError:
                pass
        while ((bytebuf[0] != b'\xd9') or (bytebuf[1] != b'\xff')):
            bytebuf[1] = bytebuf[0]
            if (bp > (len(picbuf) - 1)):
                #print("appending buffer to %s" % fn)
                appendbuf(fn, picbuf, bp)
                bp = 0
    
            bytebuf[0] = cam_spi_read(b'\x3d', hspi, cspin)
            l += 1
            #print("read so far: %d, next byte: %s" % (l, ubinascii.hexlify(bytebuf[0])))
            picbuf[bp] = bytebuf[0]
            bp += 1
        if (bp > 0):
            #print("appending final buffer to %s" % fn)
            appendbuf(fn, picbuf, bp)
        #print("read %d bytes from fifo, camera said %d were available" % (l, val))
        return (l)

    # XXX these need some work
    def standby(self):
        # register set select
        i2c.writeto_mem(SENSORADDR, 0xff, b'\x01')
        # standby mode
        i2c.writeto_mem(SENSORADDR, 0x09, b'\x10')
        self.standby = True

    def wake(self):
        # register set select
        i2c.writeto_mem(SENSORADDR, 0xff, b'\x01')
        # standby mode
        i2c.writeto_mem(SENSORADDR, 0x09, b'\x00')
        self.standby = False

def cam_write_register_set(i, addr, set):
    for el in set:
        raddr = el[0]
        val = bytes([el[1]])
        if (raddr == 0xff and val == b'\xff'):
            return
        print("writing byte %s to addr %x register addr %x" % (ubinascii.hexlify(val), addr, raddr))
        i.writeto_mem(addr, raddr, val)

def appendbuf(fn, picbuf, howmany):
    try:
        f = open(fn, 'ab')
        c = 1
        for by in picbuf:
            if (c > howmany):
                break
            c += 1
            f.write(bytes([by[0]]))
        f.close()
    except OSError:
        print("error writing file")
    print("write %d bytes from buffer" % howmany)

def cam_spi_write(address, value, hspi, cspin):
    cspin.off()
    modebit = b'\x80'
    d = bytes([address[0] | modebit[0], value[0]])
    print("bytes %s" % ubinascii.hexlify(d))
    #print (ubd.hex())
    hspi.write(d)
    cspin.on()

def cam_spi_read(address, hspi, cspin):
    cspin.off()
    maskbits = b'\x7f'
    wbuf = bytes([address[0] & maskbits[0]])
    hspi.write(wbuf)
    buf = hspi.read(1)
    cspin.on()
    return (buf)

# cam driver code
# https://github.com/kanflo/esparducam/blob/master/arducam/arducam.c
# register info
# https://github.com/ArduCAM/Sensor-Regsiter-Decoder/blob/master/OV2640_JPEG_INIT.csv
